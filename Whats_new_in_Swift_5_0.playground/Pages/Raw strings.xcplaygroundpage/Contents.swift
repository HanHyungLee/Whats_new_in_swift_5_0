/*:
 [Previous](@previous)
 [Home](Introduction)
 
 
 ## Raw strings
 
 [SE-0200](https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md) 문자열 리터럴을 만들 때 따옴표를 사용해서 표현한다는 것은 아실 겁니다. 문자열 내용 안에 따옴표 기호를 넣으려면 문자열을 만드는 따옴표와 구분되도록 역슬래쉬(\\")를 앞에 붙여줬어야 했습니다. 이제 그렇게 하지 않아도 됩니다. 이 원시 문자열 기능은 문자열에 내용에 역슬래쉬가 붙음으로써 가독성이 떨어짐을 보완하고, 정규식을 만드는 데 많은 도움이 될 것입니다.
 
 원시 문자열을 추가하려면 하나 이상의 '#' 기호를 문자열 앞에 추가합니다.
 
 아래 예제를 보시죠:
 */
let first = #"스위프트 5의 "새로운 기능"은 무엇? 첫번째는 "원시" 문자열 입니다."#

/*:
 문자열의 시작과 끝부분에 있는 '#' 기호는 문자열 구분 기호의 일부가 됩니다. 그래서 Swift는 "새로운 기능"과 "원시"를 감싸고 있는 따옴표를 문자열을 끝내기보다는 문자 그대로 인식하는 따옴표로 처리해야 함을 이해합니다.
 
 원시 문자열을 사용하면 역슬래시(\\), 해시(#) 기호도 사용할 수 있습니다:
 */
let second = #"원시 문자열에서 \역슬래쉬도 #샾도 사용 가능합니다."#

/*:
 이 경우 역슬래시는 이스케이프 문자가 아닌 문자열에서 문자 그대로 취급됩니다. 이것은 문자열 삽입(*string interpolation*)이 다르게 작동함을 의미합니다:
 */
let version = 5.0
let thrid = #"스위프트 \#(version)이 새롭게 출시 됐습니다! 와 공부할게 늘었다!"#

/*:
 일반적으로 문자열 삽입은 문자열 안에서 상수나, 변수, 리터럴에 해당하는 값을 추가할 때 변수를 괄호로 감싸고 맨 앞에서 역슬래쉬를 추가하게 됩니다. \(version) 이렇게 말이죠. 원시 문자열에서  이대로 하면 문자 그대로 인식하기 때문에  역슬래쉬와 시작 괄호 사이에 '#' 기호를 넣습니다. 위에 예제에 \#(version)으로 역슬래쉬 다음에 해시 기호가 온 것을 볼 수 있습니다.
 
 Swift의 원시 문자열의 흥미로운 기능 중 하나는 해시 기호를 처음과 끝에 사용하는 것입니다. 필요한 경우에 해시 기호를 둘 이상을 사용할 수 있기 때문입니다. 여기에 희귀한 케이스를 보여드리겠습니다. 아래 예제의 문자열을 보십시오. '나의 개는"왈왈"#좋은 개'라고 말했습니다. 해시 앞에 공백이 없으므로 Swift는 "# 여기를 즉시 문자열 종결로 해석합니다. 이 상황에서 우리는 원시 문자열 시작을 #"에서 ##"로 변경해야 합니다. 마찬가지로 문자열 마지막에도 "#에서 "##로 변경합니다:
 */
let str = ##"나의 개는"왈왈"#좋은 개"##

/*:
 처음과 끝에 있는 해시의 숫자가 일치해야 하는 점에 유의해야 합니다.
 
 원시 문자열은 Swift의 멀티-라인 문자열 시스템과 완벽하게 호환됩니다. #"""로 시작한 다음, """#로 끝납니다. 아래처럼 사용하면 됩니다:
 */
let multiline = #"""
Swift \#(version)
원시 문자열은
멀티라인도 문제 없지!
"""#

let multiline2 = ##"""
1. Swift \#(5.0) 원시 문자열 멀티라인 사용법
2. #"""을 붙여라
3. """#으로 끝내라.
"""##

/*:
 정규 표현식에서 역슬래시를 많이 사용하지 않으면  특히 유용합니다. 예를 들어, 다음과 같이 사용된 `\Person.name`과 같은 keypath를 찾는 간단한 정규식을 작성해야 한다면 아래와 같습니다:
 */
let regex1 = "\\\\[A-Z]+[A-Za-z]+\\.[a-z]+"

/*:
 감사하게도 원시 문자열 덕분에 우리는 역슬래시 수의 절반으로 줄이고, 동일한 표현식으로 작성할 수 있습니다:
 */
let regex2 = #"\\[A-Z]+[A-Za-z]+\.[a-z]+"#

/*:
 정규 표현식에서 사용하기 때문에 여전히 일부 필요합니다.
 
 &nbsp;
 
 [< Previous](@previous)           [Home](Introduction)           [Next >](@next)
 */
